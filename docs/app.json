[{"name":"app.R","content":"library(shiny)\nlibrary(dplyr)\nlibrary(ggplot2)\nlibrary(DT)\nlibrary(bslib)\nlibrary(thematic)\nlibrary(plotly) # Ajout de plotly\n\nthematic_shiny()\n\nui <- fluidPage(\n  theme = bs_theme(\n    version = 5,\n    bootswatch = \"quartz\"\n  ),\n  titlePanel(\"Star War Characters\"),\n  sidebarLayout(\n    sidebarPanel(\n      h2(\"My app from scratch\"),\n      sliderInput(\n        inputId = \"taille\",\n        label = \"Height of character\",\n        min = 0,\n        max = 250,\n        value = 30\n      ),\n      selectInput(\n        inputId = \"gender\",\n        label = \"Sex of character\",\n        choices = c(\"masculine\", \"feminine\", \"other\"),  \n        selected = \"masculine\"\n      ),\n      actionButton(\n        inputId = \"bouton\",\n        label = \"cliq\"\n      )\n    ),\n    mainPanel(\n      plotlyOutput(outputId = \"StarWarPlot\"), # Changer plotOutput en plotlyOutput\n      DTOutput(\n        outputId = \"StarWarTable\"\n      )\n    )\n  )\n)\n\nserver <- function(input, output) {\n  \n  # Déclaration des valeurs réactives\n  rv <- reactiveValues(starwars_filter = starwars)\n  \n  # Filtrage dynamique selon input$taille et input$gender\n  observeEvent(c(input$taille, input$gender), {\n    rv$starwars_filter <- starwars %>%\n      filter(height > input$taille) %>%\n      filter(ifelse(input$gender == \"\", TRUE, gender == input$gender)) \n  })\n  \n  # Table interactive avec DT\n  output$StarWarTable <- renderDT({\n    req(rv$starwars_filter) \n    rv$starwars_filter\n  })\n  \n  observe({\n    message(paste(\"Nombre de lignes filtrées:\", nrow(rv$starwars_filter)))\n  })\n  \n  # Graphique interactif des tailles filtrées avec plotly\n  output$StarWarPlot <- renderPlotly({\n    req(rv$starwars_filter)\n    \n    # Créer un histogramme avec plot_ly\n    p <- rv$starwars_filter %>%\n      ggplot(aes(x = height)) + \n      geom_histogram(\n        binwidth = 10,\n        fill = \"white\",\n        color = \"white\" \n      ) +\n      labs(\n        title = \"Distribution des tailles sélectionnées\"\n      ) + \n      geom_density(color=\"red\") + \n      xlim(0, 750) + geom_vline(aes(xintercept=mean(height)),\n                  color=\"blue\", linetype=\"dashed\", size=1)\n    \n    \n    # Convertir le ggplot en plotly\n    plotly_graph <- ggplotly(p)\n    \n    # Ajouter une interaction avec clic sur les barres de l'histogramme\n    plotly_graph %>% layout(\n      clickmode = 'event+select'\n    ) %>% event_register('plotly_click') # Enregistre l'événement de clic\n    \n    plotly_graph\n  })\n  \n  # Écouter les clics sur le graphique\n  observeEvent(input$StarWarPlot_click, {\n    # Récupérer les données de la barre cliquée\n    click_data <- input$StarWarPlot_click\n    clicked_bin <- click_data$points[[1]]$x  # Position de la barre cliquée\n    \n    # Trouver la plage de tailles (bin) correspondante\n    lower_bin <- floor(clicked_bin / 10) * 10\n    upper_bin <- lower_bin + 10\n    \n    # Filtrer les personnages dans cette plage de tailles\n    selected_data <- rv$starwars_filter %>%\n      filter(height >= lower_bin & height < upper_bin)\n    \n    # Afficher le nombre d'individus dans cette plage\n    showNotification(paste(\"Nombre d'individus dans cette tranche : \", nrow(selected_data)), type = \"message\")\n  })\n}\n\nshinyApp(ui = ui, server = server)\n\n\n\n\n\n\n\n","type":"text"},{"name":"My_shiny_app.Rproj","content":"Version: 1.0\n\nRestoreWorkspace: Default\nSaveWorkspace: Default\nAlwaysSaveHistory: Default\n\nEnableCodeIndexing: Yes\nUseSpacesForTab: Yes\nNumSpacesForTab: 2\nEncoding: UTF-8\n\nRnwWeave: Sweave\nLaTeX: pdfLaTeX\n","type":"text"},{"name":"Untitle.R","content":"data(starwars)\nhead(starwars)  # Pour voir les 6 premières lignes du dataset\nunique(starwars$height)  # Valeurs uniques dans la colonne \"height\"\nunique(starwars$gender)  # Valeurs uniques dans la colonne \"gender\"\nlibrary(shiny)\nlibrary(dplyr)\nlibrary(ggplot2)\nlibrary(DT)\nlibrary(bslib)\nlibrary(thematic)\nlibrary(plotly)\nthematic_shiny()\n\nui <- fluidPage(\n  theme = bs_theme(\n    version = 5,\n    bootswatch = \"minty\"\n  ),\n  titlePanel(\"Star War Characters\"),\n  sidebarLayout(\n    sidebarPanel(\n      h2(\"My app from scratch\"),\n      sliderInput(\n        inputId = \"taille\",\n        label = \"Height of character\",\n        min = 0,\n        max = 250,\n        value = 30\n      ),\n      selectInput(\n        inputId = \"gender\",\n        label = \"Sex of character\",\n        choices = c(\"masculine\", \"feminine\", \"other\"),  \n        selected = \"masculine\"\n      ), \n      actionButton(\n        inputId = \"bouton\",\n        label = \"Click me\"\n      )\n    ),\n    mainPanel(\n      plotOutput(outputId = \"StarWarPlot\"),\n      DTOutput(outputId = \"StarWarTable\")\n    )\n  )\n)\n\nserver <- function(input, output) {\n  \n  # Déclaration des valeurs réactives\n  rv <- reactiveValues(starwars_filter = starwars)\n  \n  # Filtrage dynamique selon input$taille et input$gender\n  observeEvent(c(input$taille, input$gender), {\n    rv$starwars_filter <- starwars %>%\n      filter(height > input$taille)  %>%\n      filter(ifelse(input$gender == \"other\", TRUE, gender == input$gender)) # ✅ Corriger le filtre\n  })\n  \n  # Affichage d'un texte statique\n  output$starWarTitle <- renderText({\n    \"Coucou\"\n  })\n  \n  # Table interactive avec DT\n  output$StarWarTable <- renderDT({\n    req(rv$starwars_filter) # ✅ Empêche l'affichage si `rv$starwars_filter` est vide\n    rv$starwars_filter\n  })\n  \n  observe({\n    message(paste(\"Nombre de lignes filtrées:\", nrow(rv$starwars_filter)))\n  })\n  \n  # Notification lors du clic sur un bouton (si bouton existe dans l'UI)\n  observeEvent(input$bouton, {\n    message(\"Vous avez cliqué\") # ✅ Correction orthographique\n  })\n  \n  # Notification lors du changement de `input$taille`\n  observeEvent(input$taille, {\n    showNotification(\"Vous avez changé la taille sélectionnée\") \n  })\n  \n  # Graphique des tailles filtrées\n  output$StarWarPlot <- renderPlot({\n    req(rv$starwars_filter) \n    rv$starwars_filter |> \n      ggplot(aes(x = height)) + \n      geom_histogram(\n        binwidth = 10,\n        fill = \"white\",\n        color = \"black\" \n      ) +\n      labs(\n        title = \"Distribution des tailles sélectionnées\" \n      )\n  })\n}\n\nshinyApp(ui = ui, server = server)","type":"text"},{"name":"code test.R","content":"\ndata(starwars)\nhead(starwars) \n\ntest <- ggplot(starwars, aes(x = height)) + \n  geom_histogram(\n    binwidth = 10,\n    fill = \"white\",\n    color = \"black\"\n  ) +\n  labs(\n    title = \"Distribution des tailles sélectionnées\"\n  ) + \n  geom_density(color = \"red\", na.rm = TRUE) +  # Gérer les valeurs manquantes\n  xlim(0, 750) +  # Optionnel, si tu veux limiter l'axe X\n  geom_vline(aes(xintercept = mean(height, na.rm = TRUE)),\n             color = \"blue\", linetype = \"dashed\", size = 1)\n\nprint(test)\nsummary(starwars$height)\n\ntestDensity <- ggplot(starwars %>% filter(!is.na(height)), aes(x = height)) + \n  geom_density(color = \"red\", na.rm = TRUE) +  # Afficher uniquement la densité\n  labs(\n    title = \"Distribution des tailles sélectionnées\"\n  ) + \n  xlim(0, 750)  # Limiter l'axe X à la plage raisonnable\n\nprint(testDensity)\n\n\n\n\n\ntest_hist <- ggplot(starwars %>% filter(!is.na(height)), aes(x = height)) + \n  geom_histogram(\n    binwidth = 10,\n    fill = \"white\",\n    color = \"black\"\n  ) +\n  labs(\n    title = \"Distribution des tailles avec Histogramme\"\n  ) +\n  xlim(0, 750)\n\ntest_density <- ggplot(starwars %>% filter(!is.na(height)), aes(x = height)) + \n  geom_density(color = \"red\", na.rm = TRUE) +  # Densité seule\n  labs(\n    title = \"Densité des tailles sélectionnées\"\n  ) +\n  xlim(0, 750)\n\n# Affichage séparé\nprint(test_hist)\nprint(test_density)\n\n\ntest <- ggplot(starwars %>% filter(!is.na(height)), aes(x = height)) + \n  geom_histogram(\n    binwidth = 10,\n    fill = \"white\",\n    color = \"black\"\n  ) +\n  geom_density(aes(y = ..density..), color = \"red\", size = 1) +  # Ajustement de la densité\n  labs(\n    title = \"Distribution des tailles avec densité\"\n  ) +\n  xlim(0, 750) +\n  geom_vline(aes(xintercept = mean(height, na.rm = TRUE)),\n             color = \"blue\", linetype = \"dashed\", size = 1)\n\nprint(test)\n\n\n\n\n","type":"text"},{"name":"shinnyApptest.R","content":"usethis::use_git_config(\n  scope = \"user\",\n  user.name = \"ManickLeolin\",\n  user.email = \"manicleolin2@gmail.com\",\n  init.defaultbranch = \"main\"\n)\ninstall.packages(\"shiny\")\nlibrary(shiny)\n","type":"text"}]
